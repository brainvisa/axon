#! /bin/sh

OLDLANG="$LANG"
LANG=C

# Python program to find a real file across symbolic links
nosymlink='
import sys,os
p=sys.executable # sys.argv[1]
while os.path.islink(p):
    x = os.readlink(p)
    if os.path.isabs(x):
        p = x
    else:
        p=os.path.join(os.path.dirname(p),x)
if not p: p=os.path.join(".", os.path.basename(p))
print os.path.abspath(p)'

# Find Python executable in $python

pythonexelist='python Python python2 Python2'
unset python
for pythonexe in $pythonexelist; do
    python=`which $pythonexe 2> /dev/null`
    if [ $? -eq 0 ]; then break; fi
done
[ -z "$python" ] && echo 'Cannot find Python executable' && exit 1

os=`echo $OSTYPE | sed -e 's/^\([^0-9\.]*\).*/\1/'`
if [ "$os" = "darwin" ]; then
    python=`"$python" -c "$nosymlink"` # "$python"`/$pythonexe
fi

runbrainvisa='
import sys,os
neuro = ""
executable = sys.argv[1]
if sys.version_info[0] >= 3:
    def execfile(filename, global_vars=globals(), local_vars=locals()):
        with open(filename) as f:
            code = compile(f.read(), filename, "exec")
            exec(code, global_vars, local_vars)
found = False
while True:
    p = os.path.dirname(executable)
    for d in (os.path.normpath(os.path.join(p, "..", "brainvisa")),
              os.path.normpath(os.path.join(p, "..", "..", "brainvisa"))):
      neuro = os.path.join(d, "neuro.py")
      if os.path.exists(neuro):
          found = True
          break
    if found:
        break
    if os.path.islink(executable):
        executable = os.path.join(os.path.dirname(executable),
                                  os.readlink(executable))
    else:
        break
if neuro:
    neuro = os.path.abspath(neuro)
    sys.argv[0] = neuro
    del sys.argv[1]
    pythonPath = os.path.dirname(neuro)
    sys.path[0:0] = [os.path.normpath(i) for i in \
                     (pythonPath, os.path.join(pythonPath, "..", "python"), )]
    execfile(neuro)
else:
    sys.stderr.write("Cannot find main BrainVISA directory\n")
'

LANG="$OLDLANG"
unset OLDLANG

if [ -n "$BRAINVISA_HOME" ]; then
    BRAINVISA_EXE="$BRAINVISA_HOME/bin/brainvisa"
else
    BRAINVISA_EXE="$0"
fi

# Look for neuro.py
"$python" -t -c "$runbrainvisa" "$BRAINVISA_EXE" "$@"
returnValue=$?

# After using IPython in brainvisa, console need to be reset otherwise
# characters typed by user are not displayed anymore.
#
# check that stty command exists
if ( [ ! "${TERM}" = "msys" ] && [ ! "${TERM}" = "cygwin" ] ); then
    if ( type stty > /dev/null 2>&1 ); then
        # If brainvisa is in background, do not launch stty otherwise
        # the process is stopped
        pgid=`ps -p $$ -o pgid=`
        tpgid=`ps -p $$ -o tpgid=`
        if [ "$pgid" = "$tpgid" ]; then
            # if stty command can be called then reset terminal
            stty -a > /dev/null 2>&1 && stty sane
        fi
    fi
fi

exit $returnValue

